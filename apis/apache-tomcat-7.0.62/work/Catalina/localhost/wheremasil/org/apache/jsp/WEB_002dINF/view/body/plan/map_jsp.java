/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.62
 * Generated at: 2015-06-16 02:48:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.body.plan;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"//apis.daum.net/maps/maps3.js?apikey=8090c845eb21bcc92becc6f8f3bf61fa&libraries=services\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\tvar map;\n");
      out.write("\tvar bounds;\n");
      out.write("\tvar firstBounds;\n");
      out.write("\t// 지역명 리스트\n");
      out.write("\tvar titles = [];\n");
      out.write("\t// 마커를 담을 배열\n");
      out.write("\tvar markers = [];\n");
      out.write("\t// 마커 타이틀을 담을 배열\n");
      out.write("\tvar markerTitles = [];\n");
      out.write("\t// DB에서 검색된 지역 마커를 담을 배열\n");
      out.write("\tvar areaMarkers = [];\n");
      out.write("\t// DB에서 검색된 지역 마커 타이틀을 담을 배열\n");
      out.write("\tvar areaMarkerTitles = [];\n");
      out.write("\t// 선택한 일정의 경로 리스트\n");
      out.write("\tvar schedulePath = [];\n");
      out.write("\tvar polyline = new daum.maps.Polyline();\n");
      out.write("\t// 지역 상세 데이타 뷰\n");
      out.write("\tvar infowindow;\n");
      out.write("\t// 지도 범위 재설정 딜레이 flg, time\n");
      out.write("\tvar delayFlg = false;\n");
      out.write("\tvar delayTime = 200; // 200ms, 0.2초\n");
      out.write("\t\n");
      out.write("\t//TODO start of onload\n");
      out.write("\t$(function() {\n");
      out.write("\t\t// 스타일시트 변경\n");
      out.write("\t\t$(\"header\").css(\"background-color\", \"none\");\n");
      out.write("\t\t$(\"#tile_left_nav\").css(\"visibility\", \"visible\");\n");
      out.write("\t\t$(\"#tile_right_nav\").css(\"visibility\", \"visible\");\n");
      out.write("\t\t$(\"section\").css(\"width\", \"64%\");\n");
      out.write("\t\t$(\"section\").css(\"height\", \"840px\");\n");
      out.write("\t\t\n");
      out.write("\t\t// daum api 지도\n");
      out.write("\t\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div \n");
      out.write("\t    mapOption = {\n");
      out.write("\t        center: new daum.maps.LatLng(37.3971644, 127.1081042), // 지도의 중심좌표\n");
      out.write("\t        level: 11, // 지도의 확대 레벨\n");
      out.write("\t        mapTypeId : daum.maps.MapTypeId.ROADMAP, // 지도종류\n");
      out.write("\t    }; \n");
      out.write("\t\t// 지도를 생성한다 \n");
      out.write("\t\tmap = new daum.maps.Map(mapContainer, mapOption); \n");
      out.write("\t\t\n");
      out.write("\t\t// 지도 뷰 범위를 생성한다\n");
      out.write("\t\tbounds = new daum.maps.LatLngBounds();\n");
      out.write("\t\tfirstBounds = map.getBounds();\n");
      out.write("\t\t\n");
      out.write("\t\t// 지도 타입변경 (체크박스)\n");
      out.write("\t\t// 지도 타입 정보를 가지고 있을 객체\n");
      out.write("\t\tvar mapTypes = {\n");
      out.write("\t\t    terrain : daum.maps.MapTypeId.TERRAIN,    \n");
      out.write("\t\t    traffic :  daum.maps.MapTypeId.TRAFFIC,\n");
      out.write("\t\t    bicycle : daum.maps.MapTypeId.BICYCLE\n");
      out.write("\t\t};\n");
      out.write("\t\tmap.addOverlayMapTypeId(mapTypes.terrain);\n");
      out.write("\t\t$(\"input:checkbox\").on(\"click\", function() {\n");
      out.write("\t\t\t// 지도 타입을 제거\n");
      out.write("\t\t    for (var type in mapTypes) {\n");
      out.write("\t\t        map.removeOverlayMapTypeId(mapTypes[type]);    \n");
      out.write("\t\t    }\n");
      out.write("\t\t    // 지형정보 체크박스가 체크되어있으면 지도에 지형정보 지도타입을 추가\n");
      out.write("\t\t\tif ($(\"input:checkbox[id='chkTerrain']\").is(\":checked\"))\n");
      out.write("\t\t        map.addOverlayMapTypeId(mapTypes.terrain); \n");
      out.write("\t\t    // 교통정보 체크박스가 체크되어있으면 지도에 교통정보 지도타입을 추가\n");
      out.write("\t\t\tif ($(\"input:checkbox[id='chkTraffic']\").is(\":checked\"))\n");
      out.write("\t\t        map.addOverlayMapTypeId(mapTypes.traffic);\n");
      out.write("\t\t    // 자전거도로정보 체크박스가 체크되어있으면 지도에 자전거도로정보 지도타입을 추가\n");
      out.write("\t\t\tif ($(\"input:checkbox[id='chkBicycle']\").is(\":checked\"))\n");
      out.write("\t\t        map.addOverlayMapTypeId(mapTypes.bicycle);\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t// 검색 라이브러리 (daum api)\n");
      out.write("\t\t// 장소 검색 객체를 생성\n");
      out.write("\t\tvar ps = new daum.maps.services.Places();\n");
      out.write("\t\t// 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성\n");
      out.write("\t\tinfowindow = new daum.maps.InfoWindow({zIndex:1});\n");
      out.write("\t\t// 검색창 접기\n");
      out.write("\t\t$(\"#menu_wrap\").css(\"height\", \"30px\");\n");
      out.write("\t\t \n");
      out.write("\t\t$(\"#keyword\").on(\"keyup\", function(e) {\n");
      out.write("\t\t\tif (e.which == 13) {/* 13 == enter key@ascii */\n");
      out.write("\t\t\t\tsearchPlaces();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t\t$(\"#menu_search\").on(\"click\", function() {\n");
      out.write("\t\t\tsearchPlaces();\n");
      out.write("\t\t});\n");
      out.write("\t\t$(\"#menu_more\").on(\"click\", function() {\n");
      out.write("\t\t\tif ($(this).val() == \"펼치기\") {\n");
      out.write("\t\t\t\t$(this).val(\"접기\");\n");
      out.write("\t\t\t\t$(\"#menu_wrap\").css(\"height\", \"auto\");\n");
      out.write("\t\t\t} else if ($(this).val() == \"접기\") {\n");
      out.write("\t\t\t\t$(this).val(\"펼치기\");\n");
      out.write("\t\t\t\t$(\"#menu_wrap\").css(\"height\", \"30px\");\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t\t$(\"#menu_remove\").on(\"click\", function() {\n");
      out.write("\t\t\t$(\"#keyword\").val(\"\");\n");
      out.write("\t\t\t$(\"#menu_more\").val(\"펼치기\");\n");
      out.write("\t\t\t$(\"#menu_wrap\").css(\"height\", \"30px\");\n");
      out.write("\t\t    var cList = document.getElementById(\"placesList\");\n");
      out.write("\t\t    var page = document.getElementById(\"pagination\");\n");
      out.write("\t\t    removeAllChildNods(cList);\n");
      out.write("\t\t    while (page.hasChildNodes()) {\n");
      out.write("\t\t    \tpage.removeChild (page.lastChild);\n");
      out.write("\t\t    }\n");
      out.write("\t\t    removeMarker();\n");
      out.write("            infowindow.close();\n");
      out.write("\t\t    resetBounds();\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t// 지도가 이동, 확대, 축소로 인해 지도영역이 변경되면 마지막 파라미터로 넘어온 함수를 호출\n");
      out.write("\t\tdaum.maps.event.addListener(map, 'bounds_changed', function() {\n");
      out.write("\t\t\t// delayFlg 기본값 false\n");
      out.write("\t\t\tif (!delayFlg) {\n");
      out.write("\t\t\t\tdelayFlg = !delayFlg;\n");
      out.write("\t\t\t\t// 범위 재설정\n");
      out.write("\t\t\t\tgetAreasByRange(map.getBounds());\n");
      out.write("\t\t\t\t// 지연 기본값 0.2초 후, delayFlg 복구\n");
      out.write("\t\t\t\tsetTimeout(function() {\n");
      out.write("\t\t\t\t\tdelayFlg = !delayFlg;\n");
      out.write("\t\t\t\t}, delayTime);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t\tdaum.maps.event.addListener(map, 'click', function() {\n");
      out.write("\t\t\tinfowindow.close();\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\tgetAreasByRange(map.getBounds());\n");
      out.write("\t\tfunction getAreasByRange(bounds) {\n");
      out.write("\t\t\tinfowindow.close();\n");
      out.write("\t\t\tvar swLatLng = bounds.getSouthWest();\n");
      out.write("\t\t\tvar neLatLng = bounds.getNorthEast();\n");
      out.write("\t\t\tvar stLat = swLatLng.getLat();\n");
      out.write("\t\t\tvar stLon = swLatLng.getLng();\n");
      out.write("\t\t\tvar enLat = neLatLng.getLat();\n");
      out.write("\t\t\tvar enLon = neLatLng.getLng();\n");
      out.write("\t\t\tPace.track(function(){\n");
      out.write("\t\t\t\tPace.start();\n");
      out.write("\t\t\t\t$.ajax({\n");
      out.write("\t\t        \turl: \"/wheremasil/plan/getAreasByRange.do\",\n");
      out.write("\t\t        \tdataType : \"json\",\n");
      out.write("\t\t            type: \"POST\",\n");
      out.write("\t\t            timeout : 30000, \n");
      out.write("\t\t        \tdata : {\"stLat\":stLat,\"stLon\":stLon,\"enLat\":enLat,\"enLon\":enLon},\n");
      out.write("\t\t        \tsuccess: function(data) {\n");
      out.write("\t\t        \t\t// leftcontainer 아이템 삭제\n");
      out.write("\t\t        \t\tremoveAllLeftContainerItems();\n");
      out.write("\t\t        \t\t\n");
      out.write("\t\t        \t\t// 마커 삭제\n");
      out.write("\t\t        \t\tremoveAreaMarker();\n");
      out.write("\t\t        \t\t\n");
      out.write("\t\t        \t\tfor ( var i = 0; i < data.length; i++ ) {\n");
      out.write("\t\t    \t\t        // 마커를 생성하고 지도에 표시\n");
      out.write("\t\t    \t\t        var placePosition = new daum.maps.LatLng(data[i].latitude, data[i].longitude),\n");
      out.write("\t\t    \t\t        \tmarker = addAreaMarker(placePosition, i, data[i].title, data[i].imgPath);\n");
      out.write("\t\t    \t\t        \n");
      out.write("\t\t    \t\t        (function(marker, title, addr, img, id) {\n");
      out.write("\t\t    \t\t            daum.maps.event.addListener(marker, 'mouseover', function() {\n");
      out.write("\t\t    \t\t                infowindow.close();\n");
      out.write("\t\t    \t\t                displayInfowindow(marker, title, addr, img, id);\n");
      out.write("\t\t    \t\t            });\n");
      out.write("\t\t    \t\t        })(marker, data[i].title, data[i].address, data[i].imgPath, data[i].id);\n");
      out.write("\t\t    \t\t        \n");
      out.write("\t\t    \t\t        if (data[i].channel == 'C3') {\n");
      out.write("\t\t    \t\t        \tvar content = '<div  style = \"position:relative;left:-20px;top:18px;z-index:5;\" ><img src=\"/wheremasil/uploads/images/icon/Best_choice_commercial_symbol_64.png\"></div><div class=\"borderme\"><div id=\"leftmenu_' +\n");
      out.write("\t\t    \t\t        \tdata[i].title + '\" class=\"infoview_container\"><div class=\"infoview_image_block\"><img src=\"' + \n");
      out.write("\t\t\t        \t\t\tdata[i].imgPath + '\" class=\"infoview_image\"><input type=\"hidden\" value=\"' + data[i].imgPath + '\"></div><div class=\"infoview_text_block\"><p class=\"infoview_text_title\"><b>' + \n");
      out.write("\t\t\t        \t\t\tdata[i].title + '</b></p><p class=\"infoview_text_content\">' + \n");
      out.write("\t\t\t        \t\t\tdata[i].address + '</p></div></div></div>';\n");
      out.write("\t\t\t        \t\t\t\n");
      out.write("\t\t    \t\t        \t$(\"#left-container\").append(content);\n");
      out.write("\t\t    \t\t        \t\n");
      out.write("\t\t    \t\t        \t// leftmenu 클릭시 인포윈도우 출현 - 맵이동\n");
      out.write("\t\t    \t\t        \t$(document).on(\"click\", \"#leftmenu_\" + data[i].title , function() {\n");
      out.write("\t\t    \t\t        \t\tvar title = $(this).find(\".infoview_text_title b\").text();\n");
      out.write("\t\t    \t\t        \t\tvar addr = $(this).find(\".infoview_text_content\").text();\n");
      out.write("\t\t    \t\t        \t\tvar img = $(this).find(\".infoview_image_block input\").val();\n");
      out.write("\t\t    \t\t        \t\tfor (var idx = 0; idx < areaMarkers.length; idx++) {\n");
      out.write("\t\t    \t\t        \t\t\tif (title == areaMarkers[idx].getTitle()) {\n");
      out.write("\t\t    \t    \t\t                infowindow.close();\n");
      out.write("\t\t    \t    \t\t    \t\t    map.panTo(areaMarkers[idx].getPosition());\n");
      out.write("\t\t    \t    \t\t                displayInfowindow(areaMarkers[idx], title, addr, img);\n");
      out.write("\t\t    \t    \t\t                break;\n");
      out.write("\t\t    \t\t        \t\t\t}\n");
      out.write("\t\t    \t\t        \t\t}\n");
      out.write("\t\t    \t\t\t\t\t});\n");
      out.write("\t\t    \t\t        }\n");
      out.write("\t\t    \t\t    }// end of for\n");
      out.write("\t\t    \t\t    setTimeout(function(){\n");
      out.write("\t\t\t        \t\tPace.stop();\n");
      out.write("\t\t    \t\t\t}, 1000);\n");
      out.write("\t\t            }// end of success\n");
      out.write("\t\t\t\t});// end of ajax\n");
      out.write("\t\t\t});// end of pace\n");
      out.write("\t\t}// end of getAreasByRange()\n");
      out.write("\t\t\n");
      out.write("\t\t// 지역명 리스트 추가\n");
      out.write("\t\tfunction addTitle(title) {\n");
      out.write("\t\t\tvar regExp = /[\\s*\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi;\n");
      out.write("\t\t\tvar fixedTitle = title.replace(regExp, '');\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t//TODO: 신규 지역정보 db insert\n");
      out.write("\t\t\tif (titles.length == 0) {\n");
      out.write("\t\t\t\ttitles.push(fixedTitle);\n");
      out.write("\t\t\t\t// DB지역 데이타인 경우, 인포윈도우 '일정등록' 클릭시 등록\n");
      out.write("\t        \t$(document).on(\"click\", \"#infowindow_\" + fixedTitle , function() {\n");
      out.write("\t        \t\tinfowindow.close();\n");
      out.write("\t        \t\tvar data = $($(this).parents().html()).last().val().split(\",\");\n");
      out.write("\t        \t\tvar title = data[0];\n");
      out.write("\t        \t\tvar img = data[1];\n");
      out.write("\t        \t\tvar addr = data[2];\n");
      out.write("\t        \t\tvar lat = data[3];\n");
      out.write("\t        \t\tvar lng = data[4];\n");
      out.write("\t        \t\tvar id = data[5];\n");
      out.write("\n");
      out.write("\t        \t\tvar content = '<div class=\"schedule_borderme\"><div class=\"infoview_container\" style=\"width:230px;\"><div class=\"infoview_image_block\"><img src=\"' + \n");
      out.write("\t        \t\timg + '\" class=\"infoview_image\"></div><div class=\"infoview_text_block\"><p class=\"infoview_text_title\"><b>' + \n");
      out.write("\t\t\t    \ttitle + '</b></p><p class=\"infoview_text_content\">' + \n");
      out.write("\t\t\t    \taddr + '</p></div></div></div>';\n");
      out.write("\t\t\t    \t\n");
      out.write("\t\t\t\t\tif (id == 'undefined') {\n");
      out.write("\t\t\t\t\t\t// id가 없는경우, 지역정보를 db에 insert\n");
      out.write("\t\t\t\t\t\t//alert(title+\", \"+address+\", \"+imgUrl);\n");
      out.write("\t\t\t\t\t\tPace.track(function(){\n");
      out.write("\t\t\t\t\t\t\tPace.start();\n");
      out.write("\t\t\t\t\t\t\t$.ajax({\n");
      out.write("\t\t\t\t\t        \turl: \"/wheremasil/plan/registArea.do\",\n");
      out.write("\t\t\t\t\t        \tdataType : \"text\",\n");
      out.write("\t\t\t\t\t            type: \"POST\",\n");
      out.write("\t\t\t\t\t            timeout : 30000, \n");
      out.write("\t\t\t\t\t        \tdata : {\"title\":title,\"address\":addr,\"imageUrl\":img,\"latitude\":lat,\"longitude\":lng},\n");
      out.write("\t\t\t\t\t        \tsuccess: function(data) {\n");
      out.write("\t\t\t\t\t        \t\tsetSchedule(content, data);\n");
      out.write("\t\n");
      out.write("\t\t\t\t\t        \t\t// 선택한 일정 경로 추가\n");
      out.write("\t\t\t\t\t        \t\tvar correctCourseNo = 0;\n");
      out.write("\t\t\t\t\t\t\t\t\tfor (var idx = 0; idx < dayCount - 1; idx++) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcorrectCourseNo = correctCourseNo + courseCount[idx] - 1;\n");
      out.write("\t\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t        \t\tif (schedulePath.length != correctCourseNo + courseCount[dayCount-1] - 2) {\n");
      out.write("\t\t\t\t\t        \t\t\tschedulePath.splice(correctCourseNo + courseCount[dayCount-1] - 2, 0, new daum.maps.LatLng(lat, lng));\n");
      out.write("\t\t\t\t\t        \t\t} else {\n");
      out.write("\t\t\t\t\t        \t\t\tschedulePath.push(new daum.maps.LatLng(lat, lng));\n");
      out.write("\t\t\t\t\t        \t\t}\n");
      out.write("\t\t\t\t\t        \t\tif (schedulePath.length > 1) {\n");
      out.write("\t\t\t\t\t\t    \t\t\tpolyline.setMap(null);\n");
      out.write("\t\t\t\t\t        \t\t\tdisplayArrow(schedulePath);\n");
      out.write("\t\t\t\t\t        \t\t}\n");
      out.write("\t\n");
      out.write("\t\t\t\t\t    \t\t    setTimeout(function(){\n");
      out.write("\t\t\t\t\t\t        \t\tPace.stop();\n");
      out.write("\t\t\t\t\t    \t\t\t}, 1000);\n");
      out.write("\t\t\t\t\t        \t}\n");
      out.write("\t\t\t\t\t\t\t});// end of ajax\n");
      out.write("\t\t\t\t\t\t});// end of track (pace)\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t        \t\tsetSchedule(content, id);\n");
      out.write("\n");
      out.write("\t\t        \t\t// 선택한 일정 경로 추가\n");
      out.write("\t\t        \t\tvar correctCourseNo = 0;\n");
      out.write("\t\t\t\t\t\tfor (var idx = 0; idx < dayCount - 1; idx++) {\n");
      out.write("\t\t\t\t\t\t\tcorrectCourseNo = correctCourseNo + courseCount[idx] - 1;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t        \t\tif (schedulePath.length != correctCourseNo + courseCount[dayCount-1] - 2) {\n");
      out.write("\t\t        \t\t\tschedulePath.splice(correctCourseNo + courseCount[dayCount-1] - 2, 0, new daum.maps.LatLng(lat, lng));\n");
      out.write("\t\t        \t\t} else {\n");
      out.write("\t\t        \t\t\tschedulePath.push(new daum.maps.LatLng(lat, lng));\n");
      out.write("\t\t        \t\t}\n");
      out.write("\t\t        \t\tif (schedulePath.length > 1) {\n");
      out.write("\t\t\t    \t\t\tpolyline.setMap(null);\n");
      out.write("\t\t        \t\t\tdisplayArrow(schedulePath);\n");
      out.write("\t\t        \t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t    \t\t});// end of 일정등록 click event\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tfor (var idx = 0; idx < titles.length; idx++) {\n");
      out.write("\t\t\t\t\tif (fixedTitle == titles[idx]) {\n");
      out.write("\t\t\t\t\t\tbreak;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tif (idx == titles.length - 1) {\n");
      out.write("\t\t\t\t\t\t//alert(\"title : \" + title + \", len : \" + titles.length + \", curLen : \" + idx + \", curTitle : \" + titles[idx]);\n");
      out.write("\t\t\t\t\t\ttitles.push(fixedTitle);\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// 인포윈도우 '일정등록' 클릭시 등록\n");
      out.write("\t\t\t        \t$(document).on(\"click\", \"#infowindow_\" + fixedTitle , function() {\n");
      out.write("\t\t\t        \t\tinfowindow.close();\n");
      out.write("\t\t\t        \t\tvar data = $($(this).parents().html()).last().val().split(\",\");\n");
      out.write("\t\t\t        \t\tvar title = data[0];\n");
      out.write("\t\t\t        \t\tvar img = data[1];\n");
      out.write("\t\t\t        \t\tvar addr = data[2];\n");
      out.write("\t\t\t        \t\tvar lat = data[3];\n");
      out.write("\t\t\t        \t\tvar lng = data[4];\n");
      out.write("\t\t\t        \t\tvar id = data[5];\n");
      out.write("\n");
      out.write("\t\t\t        \t\tvar content = '<div class=\"schedule_borderme\"><div class=\"infoview_container\" style=\"width:230px;\"><div class=\"infoview_image_block\"><img src=\"' + \n");
      out.write("\t\t\t        \t\timg + '\" class=\"infoview_image\"></div><div class=\"infoview_text_block\"><p class=\"infoview_text_title\"><b>' + \n");
      out.write("\t\t\t\t\t    \ttitle + '</b></p><p class=\"infoview_text_content\">' + \n");
      out.write("\t\t\t\t\t    \taddr + '</p></div></div></div>';\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tif (id == 'undefined') {\n");
      out.write("\t\t\t\t\t\t\t\t// id가 없는경우, 지역정보를 db에 insert\n");
      out.write("\t\t\t\t\t\t\t\t//alert(title+\", \"+address+\", \"+imgUrl);\n");
      out.write("\t\t\t\t\t\t\t\tPace.track(function(){\n");
      out.write("\t\t\t\t\t\t\t\t\tPace.start();\n");
      out.write("\t\t\t\t\t\t\t\t\t$.ajax({\n");
      out.write("\t\t\t\t\t\t\t        \turl: \"/wheremasil/plan/registArea.do\",\n");
      out.write("\t\t\t\t\t\t\t        \tdataType : \"text\",\n");
      out.write("\t\t\t\t\t\t\t            type: \"POST\",\n");
      out.write("\t\t\t\t\t\t\t            timeout : 30000, \n");
      out.write("\t\t\t\t\t\t\t        \tdata : {\"title\":title,\"address\":addr,\"imageUrl\":img,\"latitude\":lat,\"longitude\":lng},\n");
      out.write("\t\t\t\t\t\t\t        \tsuccess: function(data) {\n");
      out.write("\t\t\t\t\t\t\t        \t\tsetSchedule(content, data);\n");
      out.write("\t\n");
      out.write("\t\t\t\t\t\t\t        \t\t// 선택한 일정 경로 추가\n");
      out.write("\t\t\t\t\t\t\t        \t\tvar correctCourseNo = 0;\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tfor (var idx = 0; idx < dayCount - 1; idx++) {\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcorrectCourseNo = correctCourseNo + courseCount[idx] - 1;\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t        \t\tif (schedulePath.length != correctCourseNo + courseCount[dayCount-1] - 2) {\n");
      out.write("\t\t\t\t\t\t\t        \t\t\tschedulePath.splice(correctCourseNo + courseCount[dayCount-1] - 2, 0, new daum.maps.LatLng(lat, lng));\n");
      out.write("\t\t\t\t\t\t\t        \t\t} else {\n");
      out.write("\t\t\t\t\t\t\t        \t\t\tschedulePath.push(new daum.maps.LatLng(lat, lng));\n");
      out.write("\t\t\t\t\t\t\t        \t\t}\n");
      out.write("\t\t\t\t\t\t\t        \t\tif (schedulePath.length > 1) {\n");
      out.write("\t\t\t\t\t\t\t\t    \t\t\tpolyline.setMap(null);\n");
      out.write("\t\t\t\t\t\t\t        \t\t\tdisplayArrow(schedulePath);\n");
      out.write("\t\t\t\t\t\t\t        \t\t}\n");
      out.write("\t\n");
      out.write("\t\t\t\t\t\t\t    \t\t    setTimeout(function(){\n");
      out.write("\t\t\t\t\t\t\t\t        \t\tPace.stop();\n");
      out.write("\t\t\t\t\t\t\t    \t\t\t}, 1000);\n");
      out.write("\t\t\t\t\t\t\t        \t}\n");
      out.write("\t\t\t\t\t\t\t\t\t});// end of ajax\n");
      out.write("\t\t\t\t\t\t\t\t});// end of track (page)\n");
      out.write("\t\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t        \t\tsetSchedule(content, id);\n");
      out.write("\n");
      out.write("\t\t\t\t        \t\t// 선택한 일정 경로 추가\n");
      out.write("\t\t\t\t        \t\tvar correctCourseNo = 0;\n");
      out.write("\t\t\t\t\t\t\t\tfor (var idx = 0; idx < dayCount - 1; idx++) {\n");
      out.write("\t\t\t\t\t\t\t\t\tcorrectCourseNo = correctCourseNo + courseCount[idx] - 1;\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t        \t\tif (schedulePath.length != correctCourseNo + courseCount[dayCount-1] - 2) {\n");
      out.write("\t\t\t\t        \t\t\tschedulePath.splice(correctCourseNo + courseCount[dayCount-1] - 2, 0, new daum.maps.LatLng(lat, lng));\n");
      out.write("\t\t\t\t        \t\t} else {\n");
      out.write("\t\t\t\t        \t\t\tschedulePath.push(new daum.maps.LatLng(lat, lng));\n");
      out.write("\t\t\t\t        \t\t}\n");
      out.write("\t\t\t\t        \t\tif (schedulePath.length > 1) {\n");
      out.write("\t\t\t\t\t    \t\t\tpolyline.setMap(null);\n");
      out.write("\t\t\t\t        \t\t\tdisplayArrow(schedulePath);\n");
      out.write("\t\t\t\t        \t\t}\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t    \t\t});// end of 일정등록 click event\n");
      out.write("\t\t\t\t\t}// end of if\n");
      out.write("\t\t\t\t}// end of for\n");
      out.write("\t\t\t}// end of else\n");
      out.write("\t\t}// end of addTItle\n");
      out.write("\t\t\n");
      out.write("\t\t// 지도 범위 설정\n");
      out.write("\t\tfunction setBounds() {\n");
      out.write("\t\t\tmap.setBounds(bounds);\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 지도 범위 추가\n");
      out.write("\t\tfunction extendsBounds(position) {\n");
      out.write("\t\t\tbounds.extend(position);\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 지도 범위 리셋\n");
      out.write("\t\tfunction resetBounds() {\n");
      out.write("\t\t\tbounds = new daum.maps.LatLngBounds();\n");
      out.write("\t\t\tfor (var idx = 0; idx < areaMarkers.length; idx++) {\n");
      out.write("\t\t\t\textendsBounds(areaMarkers[idx].getPosition());\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tif (areaMarkers.length == 0) {\n");
      out.write("\t\t\t\tbounds = firstBounds;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tsetBounds();\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// DB지역 마커를 생성하고 지도 위에 마커를 표시하는 함수\n");
      out.write("\t\tfunction addAreaMarker(position, idx, title, imageUrl) {\n");
      out.write("\t\t\tvar imageSrc = imageUrl,\n");
      out.write("\t\t\timageSize = new daum.maps.Size(36, 37),  // 마커 이미지의 크기\n");
      out.write("\t        markerImage = new daum.maps.MarkerImage(imageSrc, imageSize),\n");
      out.write("\t        marker = new daum.maps.Marker({\n");
      out.write("\t\t    \tposition: position, // 마커의 위치\n");
      out.write("\t\t    \timage: markerImage,\n");
      out.write("\t\t    \ttitle: title\n");
      out.write("\t        });\n");
      out.write("\t\t\tvar content = '<div class=\"title\"><h3><b>' + title + '</b></h3></div>';\n");
      out.write("\t\t\tvar markerTitle = new daum.maps.CustomOverlay({\n");
      out.write("\t\t\t    map: map,\n");
      out.write("\t\t\t    position: position,\n");
      out.write("\t\t\t    content: content,\n");
      out.write("\t\t\t    yAnchor: 0\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\t\n");
      out.write("\t\t    marker.setMap(map); // 지도 위에 마커를 표출\n");
      out.write("\t\t    areaMarkers.push(marker);  // 배열에 생성된 마커를 추가\n");
      out.write("\t\t    areaMarkerTitles.push(markerTitle); // 배열에 생성된 마커오버레이를 추가\n");
      out.write("\t\t    addTitle(title); // 지역명 리스트에 추가\n");
      out.write("\t\n");
      out.write("\t\t    // 마커를 지도 뷰 범위에 추가\n");
      out.write("\t\t\textendsBounds(position);\n");
      out.write("\t\n");
      out.write("\t\t    return marker;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// leftmenu 아이템 삭제\n");
      out.write("\t\tfunction removeAllLeftContainerItems() {\n");
      out.write("\t\t\t$(\"#left-container\").html(\"\");\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 지도 위에 표시되고 있는 DB지역 마커와 오버레이를 모두 제거\n");
      out.write("\t\tfunction removeAreaMarker() {\n");
      out.write("\t\t    for ( var i = 0; i < areaMarkers.length; i++ ) {\n");
      out.write("\t\t    \tareaMarkers[i].setMap(null);\n");
      out.write("\t\t    \tareaMarkerTitles[i].setMap(null);\n");
      out.write("\t\t    }\n");
      out.write("\t\t    areaMarkers = [];\n");
      out.write("\t\t    areaMarkerTitles = [];\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t//TODO start of daumAPI\n");
      out.write("\t\t\n");
      out.write("\t\t// 마커를 생성하고 지도 위에 마커를 표시하는 함수\n");
      out.write("\t\tfunction addMarker(position, idx, title, imageUrl) {\n");
      out.write("\t\t\tif (imageUrl == '') {\n");
      out.write("\t\t\t\tvar imageSrc = 'http://i1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지\n");
      out.write("\t\t    \timageSize = new daum.maps.Size(36, 37),  // 마커 이미지의 크기\n");
      out.write("\t\t    \timgOptions =  {\n");
      out.write("\t\t            spriteSize : new daum.maps.Size(36, 691), // 스프라이트 이미지의 크기\n");
      out.write("\t\t            spriteOrigin : new daum.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n");
      out.write("\t\t            offset: new daum.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n");
      out.write("\t\t        },\n");
      out.write("\t\t        markerImage = new daum.maps.MarkerImage(imageSrc, imageSize, imgOptions),\n");
      out.write("\t\t            marker = new daum.maps.Marker({\n");
      out.write("\t\t\t            position: position, // 마커의 위치\n");
      out.write("\t\t\t            image: markerImage,\n");
      out.write("\t\t\t            title: title\n");
      out.write("\t\t        \t});\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tvar imageSrc = imageUrl, // 마커 이미지가 있는경우\n");
      out.write("\t\t\t\timageSize = new daum.maps.Size(36, 37),  // 마커 이미지의 크기\n");
      out.write("\t\t        markerImage = new daum.maps.MarkerImage(imageSrc, imageSize),\n");
      out.write("\t\t            marker = new daum.maps.Marker({\n");
      out.write("\t\t\t            position: position, // 마커의 위치\n");
      out.write("\t\t\t            image: markerImage,\n");
      out.write("\t\t\t            title: title\n");
      out.write("\t\t        \t});\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tvar content = '<div class=\"title\"><h3><b>' + title + '</b></h3></div>';\n");
      out.write("\t\t\tvar markerTitle = new daum.maps.CustomOverlay({\n");
      out.write("\t\t\t    map: map,\n");
      out.write("\t\t\t    position: position,\n");
      out.write("\t\t\t    content: content,\n");
      out.write("\t\t\t    yAnchor: 0\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\t\n");
      out.write("\t\t    marker.setMap(map); // 지도 위에 마커를 표출\n");
      out.write("\t\t    markers.push(marker);  // 배열에 생성된 마커를 추가\n");
      out.write("\t\t    markerTitles.push(markerTitle); // 배열에 생성된 마커오버레이를 추가\n");
      out.write("\t\t    addTitle(title); // 지역명 리스트에 추가\n");
      out.write("\t\n");
      out.write("\t\t    // 마커를 지도 뷰 범위에 추가\n");
      out.write("\t\t\textendsBounds(position);\n");
      out.write("\t\n");
      out.write("\t\t    return marker;\n");
      out.write("\t\t}\n");
      out.write("\t\t// 지도 위에 표시되고 있는 마커와 오버레이를 모두 제거\n");
      out.write("\t\tfunction removeMarker() {\n");
      out.write("\t\t    for ( var i = 0; i < markers.length; i++ ) {\n");
      out.write("\t\t        markers[i].setMap(null);\n");
      out.write("\t\t        markerTitles[i].setMap(null);\n");
      out.write("\t\t    }\n");
      out.write("\t\t    markers = [];\n");
      out.write("\t\t    markerTitles = [];\n");
      out.write("\t\t}\n");
      out.write("\t\n");
      out.write("\t\t// 키워드 검색을 요청하는 함수\n");
      out.write("\t\tfunction searchPlaces() {\n");
      out.write("\t\t    var keyword = document.getElementById('keyword').value;\n");
      out.write("\t\n");
      out.write("\t\t    if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\n");
      out.write("\t\t        alert('키워드를 입력해주세요!');\n");
      out.write("\t\t        return false;\n");
      out.write("\t\t    }\n");
      out.write("\t\t\t$(\"#menu_more\").val(\"접기\");\n");
      out.write("\t\n");
      out.write("\t\t    // 장소검색 객체를 통해 키워드로 장소검색을 요청\n");
      out.write("\t\t    ps.keywordSearch( keyword, placesSearchCB, {location:map.getCenter()}); \n");
      out.write("\t\t}\n");
      out.write("\t\t// 장소검색이 완료됐을 때 호출되는 콜백함수\n");
      out.write("\t\tfunction placesSearchCB(status, data, pagination) {\n");
      out.write("\t\t    if (status === daum.maps.services.Status.OK) {\n");
      out.write("\t\t        // 정상적으로 검색이 완료됐으면\n");
      out.write("\t\t        // 검색 목록과 마커를 표출\n");
      out.write("\t\t        displayPlaces(data.places);\n");
      out.write("\t\n");
      out.write("\t\t        // 페이지 번호를 표출\n");
      out.write("\t\t        displayPagination(pagination);\n");
      out.write("\t\n");
      out.write("\t\t    } else if (status === daum.maps.services.Status.ZERO_RESULT) {\n");
      out.write("\t\n");
      out.write("\t\t        alert('검색 결과가 존재하지 않습니다.');\n");
      out.write("\t\t        return;\n");
      out.write("\t\n");
      out.write("\t\t    } else if (status === daum.maps.services.Status.ERROR) {\n");
      out.write("\t\n");
      out.write("\t\t        alert('검색 결과 중 오류가 발생했습니다.');\n");
      out.write("\t\t        return;\n");
      out.write("\t\n");
      out.write("\t\t    }\n");
      out.write("\t\t}\n");
      out.write("\t\t// 검색 결과 목록과 마커를 표출하는 함수\n");
      out.write("\t\tfunction displayPlaces(places) {\n");
      out.write("\t\t\t// 오버레이 뷰 height 재설정을 위한 값\n");
      out.write("\t\t\tvar totalHeight=0;\n");
      out.write("\t\t    var listEl = document.getElementById('placesList'), \n");
      out.write("\t\t    menuEl = document.getElementById('menu_wrap'),\n");
      out.write("\t\t    fragment = document.createDocumentFragment(), \n");
      out.write("\t\t    listStr = '';\n");
      out.write("\t\t    \n");
      out.write("\t\t    // 검색 결과 목록에 추가된 항목들을 제거\n");
      out.write("\t\t    removeAllChildNods(listEl);\n");
      out.write("\t\n");
      out.write("\t\t    // 지도에 표시되고 있는 마커를 제거\n");
      out.write("\t\t    removeMarker();\n");
      out.write("\t\t    \n");
      out.write("\t\t    for ( var i=0; i<places.length; i++ ) {\n");
      out.write("\t\n");
      out.write("\t\t        // 마커를 생성하고 지도에 표시\n");
      out.write("\t\t        var placePosition = new daum.maps.LatLng(places[i].latitude, places[i].longitude),\n");
      out.write("\t\t            marker = addMarker(placePosition, i, places[i].title, places[i].imageUrl), \n");
      out.write("\t\t            itemEl = getListItem(i, places[i], marker); // 검색 결과 항목 Element를 생성\n");
      out.write("\n");
      out.write("\t\t        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n");
      out.write("\t\t        // LatLngBounds 객체에 좌표를 추가\n");
      out.write("\t\n");
      out.write("\t\t        // 마커와 검색결과 항목에 mouseover 했을때\n");
      out.write("\t\t        // 해당 장소에 인포윈도우에 장소명을 표시\n");
      out.write("\t\t        // mouseout 했을 때는 인포윈도우를 닫음\n");
      out.write("\t\t        (function(marker, title, addr, img) {\n");
      out.write("\t\t            daum.maps.event.addListener(marker, 'mouseover', function() {\n");
      out.write("\t\t                infowindow.close();\n");
      out.write("\t\t                displayInfowindow(marker, title, addr, img);\n");
      out.write("\t\t            });\n");
      out.write("\t\t            \n");
      out.write("\t\t            daum.maps.event.addListener(marker, 'click', function() {\n");
      out.write("\t\t    \t\t    map.panTo(marker.getPosition());\n");
      out.write("\t\t                map.setLevel(7);\n");
      out.write("\t\t            });\n");
      out.write("\t\t            \n");
      out.write("\t\t            itemEl.onmouseover =  function () {\n");
      out.write("\t\t                infowindow.close();\n");
      out.write("\t\t                displayInfowindow(marker, title, addr, img);\n");
      out.write("\t\t            };\n");
      out.write("\t\t            \n");
      out.write("\t\t            itemEl.onmouseup =  function () {\n");
      out.write("\t\t    \t\t    map.panTo(marker.getPosition());\n");
      out.write("\t\t                map.setLevel(7);\n");
      out.write("\t\t            };\n");
      out.write("\t\t        })(marker, places[i].title, places[i].address, places[i].imageUrl);\n");
      out.write("\t\n");
      out.write("\t\t        fragment.appendChild(itemEl);\n");
      out.write("\t\t        \n");
      out.write("\t\t        totalHeight += 110;\n");
      out.write("\t\t    }// end of for\n");
      out.write("\t\n");
      out.write("\t\t    // 검색결과 항목들을 검색결과 목록 Element에 추가\n");
      out.write("\t\t    listEl.appendChild(fragment);\n");
      out.write("\t\t    menuEl.scrollTop = 0;\n");
      out.write("\t\n");
      out.write("\t\t    totalHeight += 60;\n");
      out.write("\t\t    $(\"#menu_wrap\").css(\"height\", totalHeight + \"px\");\n");
      out.write("\t\n");
      out.write("\t\t    // 검색된 장소 위치를 기준으로 지도 범위를 재설정\n");
      out.write("\t\t    //setBounds();\n");
      out.write("\t\t}\n");
      out.write("\t\t// 검색결과 항목을 Element로 반환하는 함수\n");
      out.write("\t\tfunction getListItem(index, places) {\n");
      out.write("\t\n");
      out.write("\t\t    var el = document.createElement('li');\n");
      out.write("\t\t    if (places.imageUrl != '') {\n");
      out.write("\t\t\t    var itemStr = '<span style=\"margin-top:5%;margin-bottom:5%;width:32%;height:100%;float:left\"><img src=\"' + places.imageUrl + '\" style=\"width:100%;\"></span>' +\n");
      out.write("\t\t            '<div style=\"width:64%;float:right;margin:1%\"><p style=\"width:90%margin:5%;padding-top:15px;text-align:center\"><b>' +\n");
      out.write("\t\t            places.title + '</b></p><p style=\"width:90%;margin:5%;text-align:center\">';\n");
      out.write("\t\t\t    itemStr += places.address  + '</p></div></div>'; \n");
      out.write("\t\t    } else {\n");
      out.write("\t\t\t\tvar itemStr = '<span class=\"markerbg marker_' + (index+1) + '\"></span>' +\n");
      out.write("\t\t\t    \t'<div class=\"info\">' +\n");
      out.write("\t\t\t    \t'   <h5>' + places.title + '</h5>';\n");
      out.write("\t\t\t\titemStr += '    <span>' +  places.address  + '</span>';\n");
      out.write("\t\t    }\n");
      out.write("\t\t                 \n");
      out.write("\t\t    el.innerHTML = itemStr;\n");
      out.write("\t\t    el.className = 'item';\n");
      out.write("\t\t\n");
      out.write("\t\t    return el;\n");
      out.write("\t\t}\n");
      out.write("\t\t// 검색결과 목록 하단에 페이지번호를 표시는 함수\n");
      out.write("\t\tfunction displayPagination(pagination) {\n");
      out.write("\t\t    var paginationEl = document.getElementById('pagination'),\n");
      out.write("\t\t        fragment = document.createDocumentFragment(), i; \n");
      out.write("\t\n");
      out.write("\t\t    // 기존에 추가된 페이지번호를 삭제\n");
      out.write("\t\t    while (paginationEl.hasChildNodes()) {\n");
      out.write("\t\t        paginationEl.removeChild (paginationEl.lastChild);\n");
      out.write("\t\t    }\n");
      out.write("\t\n");
      out.write("\t\t    for (i=1; i<=pagination.last; i++) {\n");
      out.write("\t\t        var el = document.createElement('a');\n");
      out.write("\t\t        el.href = \"#\";\n");
      out.write("\t\t        el.innerHTML = i;\n");
      out.write("\t\n");
      out.write("\t\t        if (i===pagination.current) {\n");
      out.write("\t\t            el.className = 'on';\n");
      out.write("\t\t        } else {\n");
      out.write("\t\t            el.onclick = (function(i) {\n");
      out.write("\t\t                return function() {\n");
      out.write("\t\t                    pagination.gotoPage(i);\n");
      out.write("\t\t                }\n");
      out.write("\t\t            })(i);\n");
      out.write("\t\t        }\n");
      out.write("\t\n");
      out.write("\t\t        fragment.appendChild(el);\n");
      out.write("\t\t    }\n");
      out.write("\t\t    paginationEl.appendChild(fragment);\n");
      out.write("\t\t}\n");
      out.write("\t\t// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수\n");
      out.write("\t\t// 인포윈도우에 장소명을 표시\n");
      out.write("\t\tfunction displayInfowindow(marker, title, addr, img, id) {\n");
      out.write("\t\t\tvar regExp = /[\\s*\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi;\n");
      out.write("\t\t\tvar fixedTitle = title.replace(regExp, \"\");\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tvar imageUrl = img;\n");
      out.write("\t\t\tif (imageUrl == '') {\n");
      out.write("\t\t\t\timageUrl = \"/wheremasil/uploads/images/default/img_not_found.png\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tvar data = {\n");
      out.write("\t\t\t\t\"title\":title,\n");
      out.write("\t\t\t\t\"img\":imageUrl,\n");
      out.write("\t\t\t\t\"addr\":addr\n");
      out.write("\t\t\t};\n");
      out.write("\t\t\t\n");
      out.write("\t\t    var content = '<div style=\"max-width:300px\"><div style=\"width:32%;float:left;margin:1%\"><img src=\"' + \n");
      out.write("\t\t    \timageUrl + '\" style=\"width:100%;margin:5px;\"></div><div style=\"width:64%;float:right;margin:1%\"><p style=\"width:90%;margin:5%;text-align:center\"><b>' + \n");
      out.write("\t\t    \ttitle + '</b></p><p style=\"width:90%;margin-top:5%;margin-left:5%;margin-right:5%;text-align:center\">' + \n");
      out.write("\t\t    \taddr + '</p><div style=\"width:50%;margin-left:25%;margin-right:25%;padding-top:2%\"><input type=\"button\" class=\"plan_button\" id=\"infowindow_' + \n");
      out.write("\t\t    \tfixedTitle + '\" value=\"일정등록\"><input type=\"hidden\" value=\"' + \n");
      out.write("\t\t    \ttitle + ',' + imageUrl + ',' + addr + ',' + marker.getPosition().getLat() + ',' + marker.getPosition().getLng() + ',' + id + '\"></div></div>' +\n");
      out.write("\t\t    \t'<a href=\"javascript:void(0);\" id=\"closeBt\" class=\"close-thik\"></a></div>';\n");
      out.write("\t\t    infowindow.setContent(content);\n");
      out.write("\t\t    infowindow.open(map, marker);\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// path = 좌표 배열\n");
      out.write("\t\tfunction displayArrow(path) {\n");
      out.write("\t\t\t// 지도에 선을 표시한다 \n");
      out.write("\t\t\tpolyline = new daum.maps.Polyline({\n");
      out.write("\t\t\t\tmap: map,\n");
      out.write("\t\t\t\tpath: path,\n");
      out.write("\t\t\t\tstrokeWeight: 2, // 선의 두께\n");
      out.write("\t\t\t\tstrokeColor: '#FF0000', // 선 색\n");
      out.write("\t\t\t\tstrokeOpacity: 0.7, // 선 투명도\n");
      out.write("\t\t\t\tstrokeStyle: 'solid' // 선 스타일\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\tpolyline.setMap(map);\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t // 검색결과 목록의 자식 Element를 제거하는 함수\n");
      out.write("\t\tfunction removeAllChildNods(el) {   \n");
      out.write("\t\t    while (el.hasChildNodes()) {\n");
      out.write("\t\t        el.removeChild (el.lastChild);\n");
      out.write("\t\t    }\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t// 인포윈도우 닫기버튼 (x)\n");
      out.write("\t\t$(document).on(\"click\", \"#closeBt\", function() {\n");
      out.write("\t\t\tinfowindow.close();\n");
      out.write("\t\t});\n");
      out.write("\t\t// 스케줄 클릭\n");
      out.write("\t\t$(document).on(\"click\", \".schedule_borderme\", function() {\n");
      out.write("\t\t\tvar course = $(this).parents(\"fieldset\").children(\"legend\").text();\n");
      out.write("\n");
      out.write("\t\t\tvar correctCourseNo = 0;\n");
      out.write("\t\t\tfor (var idx = 0; idx < dayCount - 1; idx++) {\n");
      out.write("\t\t\t\tcorrectCourseNo = correctCourseNo + courseCount[idx] - 1;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tvar targetNo = course.substring(6, 7);\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t// 일정 경로 표시\n");
      out.write("\t\t\tschedulePath.splice(correctCourseNo + parseInt(targetNo, 10) - 1, 1);\n");
      out.write("\t\t\tpolyline.setMap(null);\n");
      out.write("\t\t\tif (schedulePath.length > 1) {\n");
      out.write("\t\t\t\tdisplayArrow(schedulePath);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tremoveSchedule(course);\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t});// end of onload\n");
      out.write("\t//TODO end of onload\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<div style=\"heigth:3%\">\n");
      out.write("\t<label><input type=\"checkbox\" id=\"chkTerrain\" checked=\"checked\">지형정보 보기</label>\n");
      out.write("\t<label><input type=\"checkbox\" id=\"chkTraffic\">교통정보 보기</label>\n");
      out.write("\t<label><input type=\"checkbox\" id=\"chkBicycle\">자전거도로정보 보기</label>\n");
      out.write("</div>\n");
      out.write("<div class=\"map_wrap\" style=\"width:99%; height:97%; margin:auto\">\n");
      out.write("\t<div id=\"map\" style=\"width:100%;height:100%;position:relative;overflow:hidden;\"></div>\n");
      out.write("\n");
      out.write("\t<div id=\"menu_wrap\" class=\"bg_white\">\n");
      out.write("\t\t<div class=\"option\">\n");
      out.write("\t\t\t<input type=\"text\" value=\"\" placeholder=\"검색어 입력\" id=\"keyword\" size=\"15\"> \n");
      out.write("\t\t\t<input type=\"button\" id=\"menu_search\" value=\"검색\">\n");
      out.write("\t\t\t<input type=\"button\" id=\"menu_more\" value=\"펼치기\" >\n");
      out.write("\t\t\t<input type=\"button\" id=\"menu_remove\" value=\"지우기\" >\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<hr>\n");
      out.write("\t\t<ul id=\"placesList\"></ul>\n");
      out.write("\t\t<div id=\"pagination\"></div>\n");
      out.write("\t</div>\n");
      out.write("</div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
